// (--- https://leetcode.com/problems/4sum/ ---)


class Solution {
public:
    int mod = 1e7;
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(), nums.end());
        set<vector<int>> s;

        for(int i = 0 ; i < n ; i++){
            if(i > 0 && nums[i] == nums[i-1]) continue;
            for(int j = i+1 ; j < n ; j++){
                if(j > i+1 && nums[j] == nums[j-1]) continue;
                int k = j+1;
                int l = n-1;
                while(k < l){
                    long long int sum = (long(nums[i])+long(nums[j])+long(nums[k])+long(nums[l]));
                    // cout<<sum<<"\n";
                    if(sum < target){
                        k++;
                    }
                    else if(sum > target){
                        l--;
                    }
                    else{
                        s.insert({nums[i], nums[j], nums[k], nums[l]});
                        k++;
                        l--;
                    }
                }
            }
        }
        vector<vector<int>> ans;
        for(auto x: s){
            ans.push_back(x);
        }
        return ans;
    }
};
