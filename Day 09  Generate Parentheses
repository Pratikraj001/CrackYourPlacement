// (--- https://leetcode.com/problems/generate-parentheses/ ---)


class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        funParenthesis(ans, n, 0, 0, "");
        return ans;
    }

    void funParenthesis(vector<string> &ans, int n, int open, int close, string curr_str){
        //base case
        if(curr_str.length() == n*2){
            ans.push_back(curr_str);
            return;
        }

        if(open < n) 
            funParenthesis(ans, n, open+1, close, curr_str+'(');
        if(close < open)
            funParenthesis(ans, n, open, close+1, curr_str+')');
    }
};
